name: AKS Setup
run-name: AKS Setup

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to ACR"]
    types:
      - completed

jobs:
  detect_services:
    name: Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Identify microservices with VERSION file
        id: set-matrix
        run: |
          all_services=$(find microservices -type f -name 'VERSION' | xargs -n1 dirname | sort -u)
          if [ -z "$all_services" ]; then
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi
          json_array=$(printf '%s\n' $all_services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT

  validate_image:
    name: Validate Image in ACR
    runs-on: ubuntu-latest
    needs: detect_services
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Validate image and upload metadata
        run: |
          version=$(cat ${{ matrix.service_path }}/VERSION)
          image_name=$(basename "${{ matrix.service_path }}")
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          if az acr repository show-tags --name "$acr_name" --repository "$image_name" --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "{\"service_name\":\"$image_name\", \"version\":\"$version\"}" > result.json
          else
            echo "Image not found"
            exit 1
          fi

      - id: set-safe-name
        run: |
          safe_name=$(echo "${{ matrix.service_path }}" | tr '/' '_')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: validate-${{ steps.set-safe-name.outputs.safe_name }}
          path: result.json

  aggregate_validation_results:
    name: Aggregate Validation Results
    runs-on: ubuntu-latest
    needs: validate_image
    outputs:
      aggregated_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: validate_results

      - id: set-matrix
        run: |
          files=$(find validate_results -name "result.json")
          services=()
          for f in $files; do
            services+=("$(cat $f)")
          done
          json_matrix=$(printf '%s\n' "${services[@]}" | jq -s .)
          echo "matrix=$json_matrix" >> $GITHUB_OUTPUT

  create_api_k8s_secret:
    name: Create or Update AKS Secret
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    if: ${{ contains(needs.aggregate_validation_results.outputs.aggregated_matrix, '"service_name":"ingest-api"') }}
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.resource_group || secrets.RESOURCE_GROUP }} --name ${{ github.event.inputs.aks_name || secrets.AKS_NAME }} --admin

      - run: |
          if [[ -z "${{ secrets.API_KEY }}" ]]; then
            echo "API_KEY secret is missing!"
            exit 1
          fi
          kubectl delete secret ingest-api-secret --ignore-not-found
          kubectl create secret generic ingest-api-secret --from-literal=API_KEY="${{ secrets.API_KEY }}"

  generate_summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    steps:
      - run: |
          echo "## AKS Deployment Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.aggregate_validation_results.outputs.aggregated_matrix }}' | jq -c '.[]' | while read service; do
            name=$(echo $service | jq -r '.service_name')
            version=$(echo $service | jq -r '.version')
            echo "- Service: $name" >> $GITHUB_STEP_SUMMARY
            echo "  - Version: $version" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
