run-name: Build and Push to ACR
name: Build and Push to ACR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'microservices/**/VERSION'

jobs:
  detect_services:
    name: 🔍 Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧠 Identify microservices with VERSION file
        id: set-matrix
        run: |
          echo "🔎 Searching for VERSION files in microservices/"
          all_services=$(find microservices -type f -name 'VERSION' | xargs -n1 dirname | sort -u)

          if [ -z "$all_services" ]; then
            echo "⚠️ No VERSION files found under microservices/. Exiting."
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📁 Detected services:"
          echo "$all_services"

          json_array=$(printf '%s\n' $all_services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT
        shell: bash

  build_and_push:
    name: 🚀 Build and Push (${{ matrix.service_path }})
    runs-on: ubuntu-latest
    needs: detect_services
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          echo "🔐 Logging into ACR: $acr_name"
          az acr login --name $acr_name

      - name: 📖 Read service version
        id: version
        run: |
          version=$(cat ${{ matrix.service_path }}/VERSION)
          echo "📦 Service: ${{ matrix.service_path }}"
          echo "🏷️ Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 🔎 Check if image exists in ACR
        id: check
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")
          echo "🔍 Checking if image $image_name:$version exists in ACR $acr_name..."

          if az acr repository show-tags --name $acr_name --repository $image_name --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "✅ Image $image_name:$version already exists. Skipping build."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "🆕 Image $image_name:$version not found. Build required."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏗️ Build Docker image
        if: steps.check.outputs.skip_build != 'true'
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "🏗️ Building image $acr_name.azurecr.io/$image_name:$version"
          docker build -t $acr_name.azurecr.io/$image_name:$version -f ${{ matrix.service_path }}/Dockerfile ${{ matrix.service_path }}/

      - name: 📤 Push Docker image
        if: steps.check.outputs.skip_build != 'true'
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "📤 Pushing image $acr_name.azurecr.io/$image_name:$version"
          docker push $acr_name.azurecr.io/$image_name:$version
