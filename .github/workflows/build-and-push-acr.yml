name: Build and Push to ACR
run-name: Build and Push to ACR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'microservices/**/VERSION'

jobs:
  detect_services:
    name: 🔍 Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧠 Identify microservices with VERSION file
        id: set-matrix
        run: |
          echo "🔎 Searching for VERSION files in microservices/"
          all_services=$(find microservices -type f -name 'VERSION' | xargs -n1 dirname | sort -u)

          if [ -z "$all_services" ]; then
            echo "⚠️ No VERSION files found under microservices/. Exiting."
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📁 Detected services:"
          echo "$all_services"

          json_array=$(printf '%s\n' $all_services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT

  filter_to_build:
    name: 🧪 Filter Services to Build
    runs-on: ubuntu-latest
    needs: detect_services
    outputs:
      filtered_matrix: ${{ steps.filter.outputs.filtered_matrix }}
      services_status: ${{ steps.filter.outputs.services_status }}
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: 📖 Check ACR and collect to build
        id: check
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version=$(cat ${{ matrix.service_path }}/VERSION)
          image_name=$(basename "${{ matrix.service_path }}")

          echo "🔍 Checking if $image_name:$version exists in ACR..."

          set +e
          tags=$(az acr repository show-tags --name $acr_name --repository $image_name --query "[?contains(@, '$version')]" 2>/dev/null)
          exit_code=$?
          set -e

          if [[ $exit_code -ne 0 || -z "$tags" || "$tags" == "[]" ]]; then
            echo "🆕 $image_name:$version needs to be built."
            echo "build_required=true" >> $GITHUB_OUTPUT
            echo "${{ matrix.service_path }}" >> services_to_build.txt
            echo "{\"service\":\"$image_name\", \"version\":\"$version\", \"status\":\"to_build\"}" >> services_status.tmp
          else
            echo "✅ $image_name:$version already exists. Skipping."
            echo "build_required=false" >> $GITHUB_OUTPUT
            echo "{\"service\":\"$image_name\", \"version\":\"$version\", \"status\":\"skipped\"}" >> services_status.tmp
          fi

      - name: 🧪 Aggregate build list and create status JSON
        id: filter
        if: always()
        run: |
          touch services_to_build.txt
          echo "Aggregating list of services to build..."
          build_list=$(sort -u services_to_build.txt | jq -R . | jq -s -c .)
          echo "✅ Final build matrix: $build_list"
          echo "filtered_matrix=$build_list" >> $GITHUB_OUTPUT

          if [ -f services_status.tmp ]; then
            jq -s '.' services_status.tmp > services_status.json
          else
            echo '[]' > services_status.json
          fi
          echo "services_status=$(cat services_status.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Upload services_status.json for next job
        uses: actions/upload-artifact@v3
        with:
          name: services_status
          path: services_status.json

  generate_summary:
    name: 📋 Generate Summary
    runs-on: ubuntu-latest
    needs: filter_to_build
    outputs:
      summary_ready: true
    steps:
      - name: Download services_status.json
        uses: actions/download-artifact@v3
        with:
          name: services_status
          path: .

      - name: Criar summary da build e push
        run: |
          echo "## Resumo da Build e Push para ACR" >> $GITHUB_STEP_SUMMARY

          services_status=$(cat services_status.json)
          echo "### Serviços detectados:" >> $GITHUB_STEP_SUMMARY

          echo "$services_status" | jq -c '.[]' | while read service; do
            name=$(echo $service | jq -r '.service')
            version=$(echo $service | jq -r '.version')
            status=$(echo $service | jq -r '.status')

            if [ "$status" = "skipped" ]; then
              echo "- $name:$version ✅ Já existe no ACR" >> $GITHUB_STEP_SUMMARY
            elif [ "$status" = "to_build" ]; then
              echo "- $name:$version 🏗️ Será buildado e enviado" >> $GITHUB_STEP_SUMMARY
            else
              echo "- $name:$version ⚠️ Status desconhecido" >> $GITHUB_STEP_SUMMARY
            fi
          done

  build_and_push:
    name: 🚀 Build and Push (${{ matrix.service_path }})
    runs-on: ubuntu-latest
    needs: [filter_to_build, generate_summary]
    if: needs.filter_to_build.outputs.filtered_matrix != '[]'
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.filter_to_build.outputs.filtered_matrix) }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: 📖 Read service version
        id: version
        run: |
          version=$(cat ${{ matrix.service_path }}/VERSION)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 🏗️ Build Docker image
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "🏗️ Building $acr_name.azurecr.io/$image_name:$version"
          docker build -t $acr_name.azurecr.io/$image_name:$version -f ${{ matrix.service_path }}/Dockerfile ${{ matrix.service_path }}/

      - name: 📤 Push Docker image
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "📤 Pushing $acr_name.azurecr.io/$image_name:$version"
          docker push $acr_name.azurecr.io/$image_name:$version
