run-name: Build and Push to ACR
name: Build and Push to ACR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - '**/VERSION'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      service_path: ${{ steps.find_path.outputs.service_path }}
      image_name: ${{ steps.find_path.outputs.image_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Find service path
        id: find_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'VERSION' | head -n 1 | xargs dirname)
          image_name=$(basename "$path")
          echo "service_path=$path"
          echo "image_name=$image_name"
          echo "service_path=$path" >> $GITHUB_OUTPUT
          echo "image_name=$image_name" >> $GITHUB_OUTPUT

  check_image:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      version: ${{ steps.read.outputs.version }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Read version
        id: read
        run: |
          version=$(cat "${{ needs.setup.outputs.service_path }}/VERSION")
          echo "version=$version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if image exists in ACR
        id: check
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.read.outputs.version }}"
          image_name="${{ needs.setup.outputs.image_name }}"

          echo "Checking if image $acr_name.azurecr.io/$image_name:$version exists..."
          if az acr repository show-tags --name $acr_name --repository $image_name --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "Image exists. Skipping build."
          else
            echo "Image not found. Proceeding with build."
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: [setup, check_image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (re-auth)
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: Build Docker image
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ needs.check_image.outputs.version }}"
          service_path=$(git ls-tree -r HEAD --name-only | grep 'VERSION' | head -n 1 | xargs dirname)
          image_name=$(basename "$service_path")

          echo "Building image: $acr_name.azurecr.io/$image_name:$version"
          docker build -t $acr_name.azurecr.io/$image_name:$version -f $service_path/Dockerfile $service_path/

      - name: Push Docker image to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ needs.check_image.outputs.version }}"
          service_path=$(git ls-tree -r HEAD --name-only | grep 'VERSION' | head -n 1 | xargs dirname)
          image_name=$(basename "$service_path")

          echo "Pushing image: $acr_name.azurecr.io/$image_name:$version"
          docker push $acr_name.azurecr.io/$image_name:$version
