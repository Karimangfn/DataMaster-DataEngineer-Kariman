name: Build and Push to ACR

on:
  push:
    branches:
      - develop
    paths:
      - '**/VERSION'
  pull_request:
    branches:
      - develop
    paths:
      - '**/VERSION'
  workflow_dispatch:
    inputs:
      azure_credentials:
        description: 'Azure Credentials JSON'
        required: false
        type: string
      acr_name:
        description: 'Azure Container Registry Name'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: Detect changed service path
        id: detect_path
        run: |
          set -e

          if [ -n "${{ github.event.before }}" ]; then
            changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            changed_files=$(git log -1 --name-only)
          fi

          path=$(echo "$changed_files" | grep '/VERSION$' | head -n1 | xargs dirname || true)

          if [ -z "$path" ]; then
            echo "Nenhuma mudança no VERSION detectada."
            exit 1
          fi

          echo "Detected path: $path"
          echo "service_path=$path" >> $GITHUB_OUTPUT

      - name: Read VERSION file
        id: read_version
        run: |
          version=$(cat "${{ steps.detect_path.outputs.service_path }}/VERSION")
          service=$(basename "${{ steps.detect_path.outputs.service_path }}")
          echo "service_name=$service" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if image tag exists in ACR
        id: check_acr_tag
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          service="${{ steps.read_version.outputs.service_name }}"
          version="${{ steps.read_version.outputs.version }}"

          tag_exists=$(az acr repository show-tags --name $acr_name --repository $service --query "[?@=='$version']" -o tsv)

          if [ "$tag_exists" == "$version" ]; then
            echo "Tag $version já existe. Ignorando build."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "Tag $version NÃO existe. Vamos buildar."
            echo "skip_build=false" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        if: env.skip_build == 'false'
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          service="${{ steps.read_version.outputs.service_name }}"
          version="${{ steps.read_version.outputs.version }}"
          docker build -t ${acr_name}.azurecr.io/${service}:${version} "${{ steps.detect_path.outputs.service_path }}"

      - name: Push Docker image
        if: env.skip_build == 'false'
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          service="${{ steps.read_version.outputs.service_name }}"
          version="${{ steps.read_version.outputs.version }}"
          docker push ${acr_name}.azurecr.io/${service}:${version}
