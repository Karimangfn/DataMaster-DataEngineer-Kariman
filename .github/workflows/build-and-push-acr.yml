name: Build and Push to ACR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'microservices/**/VERSION'

jobs:
  detect_services:
    name: 🔍 Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧠 Identify microservices with VERSION file
        id: set-matrix
        run: |
          echo "🔎 Searching for VERSION files in microservices/"
          all_services=$(find microservices -type f -name 'VERSION' | xargs -n1 dirname | sort -u)

          if [ -z "$all_services" ]; then
            echo "⚠️ No VERSION files found under microservices/. Exiting."
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📁 Detected services:"
          echo "$all_services"

          json_array=$(printf '%s\n' $all_services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT

  filter_each_service:
    name: 🧪 Filter Services to Build
    runs-on: ubuntu-latest
    needs: detect_services
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: 📖 Read version and check ACR tags
        id: check
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version=$(cat ${{ matrix.service_path }}/VERSION)
          image_name=$(basename "${{ matrix.service_path }}")

          set +e
          tags=$(az acr repository show-tags --name $acr_name --repository $image_name --query "[?contains(@, '$version')]" 2>/dev/null)
          exit_code=$?
          set -e

          mkdir -p build_tmp

          if [[ $exit_code -ne 0 || -z "$tags" || "$tags" == "[]" ]]; then
            echo "${{ matrix.service_path }}" >> build_tmp/services_to_build.txt
            echo "{\"service\":\"$image_name\", \"version\":\"$version\", \"status\":\"to_build\"}" > build_tmp/status.json
          else
            echo "{\"service\":\"$image_name\", \"version\":\"$version\", \"status\":\"skipped\"}" > build_tmp/status.json
          fi

      - name: 🏷️ Set safe artifact name
        id: set-name
        run: |
          safe_name=$(echo "${{ matrix.service_path }}" | tr '/' '_')
          echo "safe_name=status_${safe_name}" >> $GITHUB_OUTPUT

      - name: 📤 Upload status artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-name.outputs.safe_name }}
          path: build_tmp/*
          if-no-files-found: warn
          compression-level: 6

  aggregate_filter:
    name: 🗃️ Aggregate Filtered Services
    runs-on: ubuntu-latest
    needs: filter_each_service
    outputs:
      filtered_matrix: ${{ steps.set_output.outputs.filtered_matrix }}
    steps:
      - name: 📥 Download all status artifacts
        uses: actions/download-artifact@v4
        with:
          path: tmp_status

      - name: 🧹 Aggregate services_to_build.txt into final_matrix.json
        run: |
          mkdir -p build_tmp  # ✅ Correção aqui
          if [ -d tmp_status ]; then
            find tmp_status -name "services_to_build.txt" -exec cat {} + | sort -u | jq -R . | jq -s -c . > build_tmp/final_matrix.json
          else
            echo '[]' > build_tmp/final_matrix.json
          fi
          cat build_tmp/final_matrix.json

      - name: 🚨 Debug filtered matrix
        run: cat build_tmp/final_matrix.json

      - id: set_output
        run: echo "filtered_matrix=$(cat build_tmp/final_matrix.json)" >> $GITHUB_OUTPUT

  build_and_push:
    name: 🚀 Build and Push
    runs-on: ubuntu-latest
    needs: aggregate_filter
    if: needs.aggregate_filter.outputs.filtered_matrix != '[]'
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.aggregate_filter.outputs.filtered_matrix) }}
    steps:
      - name: Show current service
        run: echo "Building service ${{ matrix.service_path }}"

      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: 🔐 Login to ACR
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          az acr login --name $acr_name

      - name: 📖 Read service version
        id: version
        run: |
          version=$(cat ${{ matrix.service_path }}/VERSION)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 🏗️ Build Docker image
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "🏗️ Building $acr_name.azurecr.io/$image_name:$version"
          docker build -t $acr_name.azurecr.io/$image_name:$version -f ${{ matrix.service_path }}/Dockerfile ${{ matrix.service_path }}/

      - name: 📤 Push Docker image
        run: |
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          version="${{ steps.version.outputs.version }}"
          image_name=$(basename "${{ matrix.service_path }}")

          echo "📤 Pushing $acr_name.azurecr.io/$image_name:$version"
          docker push $acr_name.azurecr.io/$image_name:$version
