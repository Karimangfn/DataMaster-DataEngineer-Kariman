run-name: AKS Setup and Deploy
name: AKS Setup and Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build and Push to ACR"]
    types:
      - completed

jobs:
  detect_services:
    name: Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Identify microservices with VERSION file
        id: set-matrix
        run: |
          all_services=$(find microservices -type f -name 'VERSION' | xargs -n1 dirname | sort -u)
          if [ -z "$all_services" ]; then
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi
          json_array=$(printf '%s\n' $all_services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT

  validate_image:
    name: Validate Image in ACR
    runs-on: ubuntu-latest
    needs: detect_services
    strategy:
      matrix:
        service_path: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - name: Validate image and upload metadata
        run: |
          version=$(cat ${{ matrix.service_path }}/VERSION)
          image_name=$(basename "${{ matrix.service_path }}")
          acr_name="${{ github.event.inputs.acr_name || secrets.ACR_NAME }}"
          if az acr repository show-tags --name "$acr_name" --repository "$image_name" --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "{\"service_name\":\"$image_name\", \"version\":\"$version\"}" > result.json
          else
            echo "Image not found"
            exit 1
          fi

      - id: set-safe-name
        run: |
          safe_name=$(echo "${{ matrix.service_path }}" | tr '/' '_')
          echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: validate-${{ steps.set-safe-name.outputs.safe_name }}
          path: result.json

  aggregate_validation_results:
    name: Aggregate Validation Results
    runs-on: ubuntu-latest
    needs: validate_image
    outputs:
      aggregated_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: validate_results

      - id: set-matrix
        run: |
          files=$(find validate_results -name "result.json" || true)
          services=()
          for f in $files; do
            services+=("$(cat $f)")
          done

          if [ ${#services[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          json_matrix=$(printf '%s\n' "${services[@]}" | jq -s -c .)
          echo "matrix=$json_matrix" >> $GITHUB_OUTPUT

  create_api_k8s_secret:
    name: Create or Update AKS Secret
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    if: ${{ contains(needs.aggregate_validation_results.outputs.aggregated_matrix, '"service_name":"ingest-api"') }}
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}

      - run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.resource_group || secrets.RESOURCE_GROUP }} --name ${{ github.event.inputs.aks_name || secrets.AKS_NAME }} --admin

      - run: |
          if [[ -z "${{ secrets.API_KEY }}" ]]; then
            echo "API_KEY secret is missing!"
            exit 1
          fi
          kubectl delete secret ingest-api-secret --ignore-not-found
          kubectl create secret generic ingest-api-secret --from-literal=API_KEY="${{ secrets.API_KEY }}"

  create_db_k8s_secret:
    name: Create or Update AKS Secret for ingest-db
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    if: ${{ contains(needs.aggregate_validation_results.outputs.aggregated_matrix, '"service_name":"ingest-db"') }}
    steps:
      - uses: actions/checkout@v4
  
      - uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}
  
      - run: |
          az aks get-credentials \
          --resource-group ${{ github.event.inputs.resource_group || secrets.RESOURCE_GROUP }} \
          --name ${{ github.event.inputs.aks_name || secrets.AKS_NAME }} --admin
  
      - run: |
          if [[ -z "${{ secrets.DB_KEY }}" ]]; then
            echo "DB_KEY secret is missing!"
            exit 1
          fi
          kubectl delete secret ingest-db-secret --ignore-not-found
          kubectl create secret generic ingest-db-secret --from-literal=DB_KEY="${{ secrets.DB_KEY }}"

  create_git_token_secret:
    name: Create or Update GitHub Token Secret
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    if: ${{ contains(needs.aggregate_validation_results.outputs.aggregated_matrix, '"service_name":"ingest-files"') }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}
  
      - run: |
          az aks get-credentials \
          --resource-group ${{ github.event.inputs.resource_group || secrets.RESOURCE_GROUP }} \
          --name ${{ github.event.inputs.aks_name || secrets.AKS_NAME }} --admin
  
      - run: |
          if [[ -z "${{ secrets.GH_PAT_TOKEN }}" ]]; then
            echo "GH_PAT_TOKEN secret is missing!"
            exit 1
          fi
          kubectl delete secret source-auth-secret --ignore-not-found
          kubectl create secret generic source-auth-secret --from-literal=token="${{ secrets.GH_PAT_TOKEN }}"

  setup_cluster:
    name: Setup AKS Cluster Without Running Jobs
    runs-on: ubuntu-latest
    needs: aggregate_validation_results
    strategy:
      matrix:
        service: ${{ fromJson(needs.aggregate_validation_results.outputs.aggregated_matrix) }}
    steps:
      - uses: actions/checkout@v4
  
      - uses: azure/login@v1
        with:
          creds: ${{ github.event.inputs.azure_credentials || secrets.AZURE_CREDENTIALS }}
  
      - run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.resource_group || secrets.RESOURCE_GROUP }} --name ${{ github.event.inputs.aks_name || secrets.AKS_NAME }} --admin
  
      - run: |
          az_creds='${{ secrets.AZURE_CREDENTIALS }}'
          tenant_id=$(echo "$az_creds" | jq -r '.tenantId')
          client_id=$(echo "$az_creds" | jq -r '.clientId')
          client_secret=$(echo "$az_creds" | jq -r '.clientSecret')
          storage_account="${{ secrets.STORAGE_ACCOUNT }}"

          service_name=$(echo '${{ matrix.service.service_name }}')
          version=$(echo '${{ matrix.service.version }}')
          acr_name="${{ secrets.ACR_NAME }}"

          custom_params=""
          if [ "$service_name" = "ingest-files" ]; then
            git_url="github.com/${GITHUB_REPOSITORY}.git"
            custom_params="--set source.git.url=$git_url"
          fi

          echo "Git URL: $git_url"
          
          echo "Deleting old job if exists..."
          kubectl delete job "$service_name-job" --ignore-not-found

          echo "Setting up service: $service_name with version: $version"

          helm upgrade --install "$service_name" "microservices/$service_name/helm" \
                       --set image.repository="$acr_name.azurecr.io/$service_name" \
                       --set image.tag="$version" \
                       --set job.enabled=false \
                       --set config.azure.tenantId="$tenant_id" \
                       --set config.azure.clientId="$client_id" \
                       --set config.azure.clientSecret="$client_secret" \
                       --set config.storage.raw.account="$storage_account" \
                       $custom_params

  generate_summary:
    name: ðŸ“‹ Deployment
    runs-on: ubuntu-latest
    needs: 
      - aggregate_validation_results
      - create_api_k8s_secret
      - create_db_k8s_secret
      - create_git_token_secret
      - setup_cluster
    steps:
      - run: |
          echo "## ðŸš€ Microservices Deployment on AKS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
  
          services_json='${{ needs.aggregate_validation_results.outputs.aggregated_matrix }}'
          total=$(echo "$services_json" | jq length)
  
          echo "**Validated Services:** **${total}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
  
          echo "### ðŸ“¦ Service Details:" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|" >> $GITHUB_STEP_SUMMARY
  
          echo "$services_json" | jq -c '.[]' | while read -r service; do
            name=$(echo "$service" | jq -r '.service_name')
            version=$(echo "$service" | jq -r '.version')
            echo "| $name | $version |" >> $GITHUB_STEP_SUMMARY
          done
