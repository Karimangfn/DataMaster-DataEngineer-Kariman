name: Deploy Infrastructure

permissions: write-all

on:
  workflow_dispatch:

jobs:
  check-role-assignments:
    name: Check Azure Role Assignments
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Role Assignments
        run: |
          set -e

          CLIENT_ID="${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}"
          SUBSCRIPTION_ID="${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}"
          SCOPE="/subscriptions/$SUBSCRIPTION_ID"

          echo "🔍 Verificando permissões do Service Principal: $CLIENT_ID no escopo $SCOPE..."

          ROLES=$(az role assignment list --assignee "$CLIENT_ID" --scope "$SCOPE" --query "[].roleDefinitionName" -o tsv)

          echo "$ROLES" | grep -q "Contributor" || {
            echo "❌ Service Principal não tem o papel 'Contributor'"
            exit 1
          }

          echo "$ROLES" | grep -q "User Access Administrator" || {
            echo "❌ Service Principal não tem o papel 'User Access Administrator'"
            exit 1
          }

          echo "✅ Client ID tem os papéis 'Contributor' e 'User Access Administrator'."
          
  resource-group:
    name: Creating Resource Group
    runs-on: ubuntu-latest
    needs: check-role-assignments
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - run: terraform init
      - run: terraform validate
      - run: terraform apply -auto-approve -target=azurerm_resource_group.rg -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate
          overwrite: true

      - name: Save current run ID
        run: echo "${{ github.run_id }}" > ../assets/terraform_state/run_id.txt
      
      - name: Commit run ID
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add ../assets/terraform_state/run_id.txt
          git commit -m "Terraform State run_id"
          git push

  acr:
    name: Creating Container Registry (ACR)
    runs-on: ubuntu-latest
    needs: resource-group
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}

      - name: Download Terraform state
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./infrastructure
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - run: terraform init
      - run: terraform validate
      - run: terraform apply -auto-approve -target=azurerm_container_registry.acr -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate
          overwrite: true

  # keyvault:
  #   name: Creating Key Vault
  #   runs-on: ubuntu-latest
  #   needs: acr
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform apply -auto-approve -target=azurerm_key_vault.kv -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true
          
  aks:
    name: Creating AKS Cluster
    runs-on: ubuntu-latest
    needs: [resource-group, acr]
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
      - name: Download Terraform state
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./infrastructure
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - run: terraform init
      - run: terraform validate
      - run: terraform apply -auto-approve -target=azurerm_network_watcher.my_watcher -var="subscription_id=$(az account show --query id -o tsv)"
      - run: terraform apply -auto-approve -target=azurerm_kubernetes_cluster.aks -var="subscription_id=$(az account show --query id -o tsv)"
      - run: terraform apply -auto-approve -target=azurerm_role_assignment.aks_acr_pull -var="subscription_id=$(az account show --query id -o tsv)"
      - run: terraform destroy -auto-approve -target=azurerm_network_watcher.my_watcher -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate
          overwrite: true

  # role-assignment:
  #   name: Creating Role Assignment for AKS ACR Pull
  #   runs-on: ubuntu-latest
  #   needs: aks
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}

  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform apply -auto-approve -target=azurerm_role_assignment.aks_acr_pull -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true

  # databricks:
  #   name: Creating Databricks Workspace
  #   runs-on: ubuntu-latest
  #   needs: role-assignment
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform apply -auto-approve -target=azurerm_databricks_workspace.dbw

  # storage-account:
  #   name: Creating Storage Account
  #   runs-on: ubuntu-latest
  #   needs: databricks
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform apply -auto-approve -target=azurerm_storage_account.lake

  # storage-containers:
  #   name: Creating Storage Containers
  #   runs-on: ubuntu-latest
  #   needs: storage-account
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform apply -auto-approve -target=azurerm_storage_container.raw -target=azurerm_storage_container.bronze -target=azurerm_storage_container.silver -target=azurerm_storage_container.gold
