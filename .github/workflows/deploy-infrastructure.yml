name: Deploy Infrastructure

permissions: write-all

on:
  workflow_dispatch:
    inputs:
      azure_credentials:
        description: 'Optional Azure credentials (JSON format). Will be used if AZURE_CREDENTIALS secret is not set.'
        required: false
        type: string

jobs:
  resource-group:
    name: Creating Resource Group
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - run: terraform init
      - run: terraform validate
      - run: terraform plan -target=azurerm_resource_group.rg -var="subscription_id=$(az account show --query id -o tsv)"
      - run: terraform apply -auto-approve -target=azurerm_resource_group.rg -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate

      - name: Save current run ID
        run: echo "${{ github.run_id }}" > ../assets/terraform_state/run_id.txt
      
      - name: Commit run ID
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add ../assets/terraform_state/run_id.txt
          git commit -m "Terraform State run_id"
          git push

  # acr:
  #   name: Creating Container Registry (ACR)
  #   runs-on: ubuntu-latest
  #   needs: resource-group
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_container_registry.acr
  #     - run: terraform apply -auto-approve -target=azurerm_container_registry.acr

  # keyvault:
  #   name: Creating Key Vault
  #   runs-on: ubuntu-latest
  #   needs: resource-group
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_key_vault.kv
  #     - run: terraform apply -auto-approve -target=azurerm_key_vault.kv

  # aks:
  #   name: Creating AKS Cluster
  #   runs-on: ubuntu-latest
  #   needs: [resource-group, acr, keyvault]
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_kubernetes_cluster.aks
  #     - run: terraform apply -auto-approve -target=azurerm_kubernetes_cluster.aks

  # role-assignment:
  #   name: Creating Role Assignment for AKS ACR Pull
  #   runs-on: ubuntu-latest
  #   needs: aks
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_role_assignment.aks_acr_pull
  #     - run: terraform apply -auto-approve -target=azurerm_role_assignment.aks_acr_pull

  # databricks:
  #   name: Creating Databricks Workspace
  #   runs-on: ubuntu-latest
  #   needs: resource-group
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_databricks_workspace.dbw
  #     - run: terraform apply -auto-approve -target=azurerm_databricks_workspace.dbw

  # storage-account:
  #   name: Creating Storage Account
  #   runs-on: ubuntu-latest
  #   needs: resource-group
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_storage_account.lake
  #     - run: terraform apply -auto-approve -target=azurerm_storage_account.lake

  # storage-containers:
  #   name: Creating Storage Containers
  #   runs-on: ubuntu-latest
  #   needs: storage-account
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   env:
  #       ARM_SUBSCRIPTION_ID: ${{ needs.get-subscription.outputs.subscription_id }}
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS || github.event.inputs.azure_credentials }}
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: terraform plan -target=azurerm_storage_container.raw -target=azurerm_storage_container.bronze -target=azurerm_storage_container.silver -target=azurerm_storage_container.gold
  #     - run: terraform apply -auto-approve -target=azurerm_storage_container.raw -target=azurerm_storage_container.bronze -target=azurerm_storage_container.silver -target=azurerm_storage_container.gold
