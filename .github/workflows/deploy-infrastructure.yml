name: Deploy Infrastructure

permissions: write-all

on:
  workflow_dispatch:

jobs:
  check-gh-pat:
    name: Check GH_PAT_TOKEN and permissions
    runs-on: ubuntu-latest
    steps:
      - name: Check if GH_PAT_TOKEN is present
        run: |
          if [ -z "${{ secrets.GH_PAT_TOKEN }}" ]; then
            echo "Erro: a secret GH_PAT_TOKEN não está definida no repositório."
            exit 1
          else
            echo "Secret GH_PAT_TOKEN encontrada."
          fi

      - name: Test token permission via API (checks if it can access the current repository)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "Testando acesso à API com o GH_PAT_TOKEN..."
          HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Erro: o token GH_PAT_TOKEN não tem permissão para acessar o repositório $REPO."
            echo "Resposta da API:"
            cat response.json
            exit 1
          else
            echo "Token válido e com acesso ao repositório."
          fi

      - name: Test if token can access secrets API
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "Verificando se o token pode acessar a API de secrets..."
          HTTP_CODE=$(curl -s -o secrets_response.json -w "%{http_code}" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/actions/secrets)
  
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Erro: o token GH_PAT_TOKEN não tem permissão para acessar a API de secrets no repositório $REPO."
            echo "Resposta da API:"
            cat secrets_response.json
            exit 1
          else
            echo "Token tem acesso à API de secrets. Provavelmente pode criar secrets também."
          fi

  check-azure-role-assignments:
    name: Check Azure Role Assignments
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Role Assignments
        run: |
          set -e

          CLIENT_ID="${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}"
          SUBSCRIPTION_ID="${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}"
          SCOPE="/subscriptions/$SUBSCRIPTION_ID"

          echo "🔍 Verificando permissões do Service Principal: $CLIENT_ID no escopo $SCOPE..."

          ROLES=$(az role assignment list --assignee "$CLIENT_ID" --scope "$SCOPE" --query "[].roleDefinitionName" -o tsv)

          echo "$ROLES" | grep -q "Contributor" || {
            echo "❌ Service Principal não tem o papel 'Contributor'"
            exit 1
          }

          echo "$ROLES" | grep -q "User Access Administrator" || {
            echo "❌ Service Principal não tem o papel 'User Access Administrator'"
            exit 1
          }

          echo "✅ Client ID tem os papéis 'Contributor' e 'User Access Administrator'."
          
  resource-group:
    name: Creating Resource Group
    runs-on: ubuntu-latest
    needs: [check-azure-role-assignments, check-gh-pat]
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check and set RUN_ID
        id: check-run-id
        run: |
          RUN_ID_PATH="../assets/terraform_state/run_id.txt"
      
          if [ ! -f "$RUN_ID_PATH" ]; then
            echo "✅ Arquivo run_id.txt não encontrado. Etapa de download será ignorada."
            echo "SKIP_DOWNLOAD=true" >> "$GITHUB_ENV"
            exit 0
          fi
      
          if [ ! -s "$RUN_ID_PATH" ]; then
            echo "⚠️ Arquivo run_id.txt está vazio. Etapa de download será ignorada."
            echo "SKIP_DOWNLOAD=true" >> "$GITHUB_ENV"
            exit 0
          fi
      
          RUN_ID=$(cat "$RUN_ID_PATH")
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
          echo "SKIP_DOWNLOAD=false" >> "$GITHUB_ENV"
      
      - name: Download Terraform state
        if: env.SKIP_DOWNLOAD == 'false'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./infrastructure
          run-id: ${{ env.RUN_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - run: terraform init
      - run: terraform validate
      - run: | 
          terraform apply -auto-approve \
            -target=azurerm_resource_group.rg \
            -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate
          overwrite: true

      - name: Save current run ID
        run: echo "${{ github.run_id }}" > ../assets/terraform_state/run_id.txt
      
      - name: Commit run ID
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add ../assets/terraform_state/run_id.txt
          git commit -m "Terraform State run_id"
          git push

      - name: Get Resource Group Name
        id: tfoutput_rg
        run: |
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV

      - name: Set RESOURCE_GROUP_NAME secret via gh CLI
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
          RESOURCE_GROUP_NAME: ${{ env.RESOURCE_GROUP_NAME }}
          REPO: ${{ github.repository }}
        run: |
          gh secret set RESOURCE_GROUP --repo $REPO --body "$RESOURCE_GROUP_NAME"

  # acr:
  #   name: Creating Container Registry (ACR)
  #   runs-on: ubuntu-latest
  #   needs: resource-group
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: |
  #         terraform apply -auto-approve \
  #           -target=azurerm_container_registry.acr \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Get Container Registry Name
  #       id: tfoutput_acr
  #       run: |
  #         CONTAINER_REGISTRY_NAME=$(terraform output -raw container_registry_name)
  #         echo "CONTAINER_REGISTRY_NAME=$CONTAINER_REGISTRY_NAME" >> $GITHUB_ENV

  #     - name: Set CONTAINER_REGISTRY_NAME secret via gh CLI
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
  #         CONTAINER_REGISTRY_NAME: ${{ env.CONTAINER_REGISTRY_NAME }}
  #         REPO: ${{ github.repository }}
  #       run: |
  #         gh secret set ACR_NAME --repo $REPO --body "$CONTAINER_REGISTRY_NAME"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true

  # keyvault:
  #   name: Creating Key Vault
  #   runs-on: ubuntu-latest
  #   needs: acr
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
      
  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: |
  #         terraform apply -auto-approve \
  #           -target=azurerm_key_vault.kv \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true
          
  # aks:
  #   name: Creating AKS Cluster
  #   runs-on: ubuntu-latest
  #   needs: [resource-group, acr]
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
      
  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: |
  #         terraform apply -auto-approve \
  #           -target=azurerm_network_watcher.default \
  #           -target=azurerm_kubernetes_cluster.aks \
  #           -target=azurerm_role_assignment.aks_acr_pull \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #         terraform destroy -auto-approve \
  #           -target=azurerm_network_watcher.default \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Get Azure Kubernetes Service Name
  #       id: tfoutput_aks
  #       run: |
  #         KUBERNETES_SERVICE=$(terraform output -raw kubernetes_cluster_name)
  #         echo "KUBERNETES_SERVICE=$KUBERNETES_SERVICE" >> $GITHUB_ENV

  #     - name: Set KUBERNETES_SERVICE secret via gh CLI
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
  #         KUBERNETES_SERVICE: ${{ env.KUBERNETES_SERVICE }}
  #         REPO: ${{ github.repository }}
  #       run: |
  #         gh secret set AKS_NAME --repo $REPO --body "$KUBERNETES_SERVICE"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true

  databricks:
    name: Creating Databricks Workspace
    runs-on: ubuntu-latest
    needs: resource-group
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Terraform state
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./infrastructure
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - run: terraform init
      - run: terraform validate
      - run: |
          terraform apply -auto-approve \
            -target=azurerm_network_watcher.default \
            -target=azurerm_databricks_workspace.dbw \
            -var="subscription_id=$(az account show --query id -o tsv)"

          terraform destroy -auto-approve \
            -target=azurerm_network_watcher.default \
            -var="subscription_id=$(az account show --query id -o tsv)"

      - name: Get workspace URL and AAD token
        id: get-databricks-info
        run: |
          WORKSPACE_URL="https://$(terraform output -raw databricks_workspace_url)"
          TOKEN=$(az account get-access-token \
                  --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d \
                  --query accessToken -o tsv)
          echo "WORKSPACE_URL=$WORKSPACE_URL" >> $GITHUB_ENV
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$TOKEN"

      - name: Create Git Credential on Databricks
        run: |
          curl -X POST "$WORKSPACE_URL/api/2.0/git-credentials" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "git_provider": "gitHub",
              "git_username": "'"${{ github.repository_owner }}"'",
              "personal_access_token": "'"${{ secrets.GH_PAT_TOKEN }}"'"
            }'
        
      - name: Deploy Databricks Job
        run: |
          terraform apply -auto-approve \
            -target=module.databricks.databricks_job.transform_clean_data_process \
            -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" \
            -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" \
            -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" \
            -var="subscription_id=$(az account show --query id -o tsv)" \
            -var="git_repo_url=https://github.com/${{ github.repository }}.git" \
            -var="git_repo_branch=main" \
            -var="enable_databricks=true"

      # - run: |
      #     terraform apply -auto-approve \
      #       -target=module.databricks.databricks_directory.folder \
      #       -target=module.databricks.databricks_repo.repo \
      #       -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" \
      #       -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" \
      #       -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" \
      #       -var="subscription_id=$(az account show --query id -o tsv)" \
      #       -var="git_repo_url=https://github.com/${{ github.repository }}.git" \
      #       -var="enable_databricks=true"

      # - run: |
      #     terraform apply -auto-approve \
      #       -target=module.databricks.databricks_service_principal.sp \
      #       -target=module.databricks.databricks_group_member.admin \
      #       -target=module.databricks.databricks_repo.repo \
      #       -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" \
      #       -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" \
      #       -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" \
      #       -var="subscription_id=$(az account show --query id -o tsv)" \
      #       -var="git_repo_url=https://github.com/${{ github.repository }}.git" \
      #       -var="git_repo_branch=main"

      # - name: Create on-behalf token for SPN
      #   id: create_token
      #   env:
      #     AZURE_ACCESS_TOKEN: ${{ steps.login_azure.outputs.access_token }}
      #     DATABRICKS_WORKSPACE_URL: "https://<workspace-url>"
      #     CLIENT_ID: $(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
      #   run: |
      #     response=$(curl -s -X POST \
      #       -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" \
      #       -H "Content-Type: application/json" \
      #       -d "{\"application_id\":\"$CLIENT_ID\",\"comment\":\"Token para terraform\",\"lifetime_seconds\":3600}" \
      #       $DATABRICKS_WORKSPACE_URL/api/2.0/token-management/on-behalf-of/tokens)
      #     echo "::set-output name=token::$(echo $response | jq -r '.token_value')"

      # - name: Terraform apply final with token to integrate repo
      #   env:
      #     DATABRICKS_TOKEN: ${{ steps.create_token.outputs.token }}
      #   run: |
      #     terraform apply -auto-approve \
      #       -target=module.databricks.databricks_repo.repo \
      #       -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" \
      #       -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" \
      #       -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" \
      #       -var="subscription_id=$(az account show --query id -o tsv)" \
      #       -var="git_repo_url=https://github.com/${{ github.repository }}.git" \
      #       -var="git_repo_branch=main"

      # - name: Link Git repo in Databricks Workspace
      #   env:
      #     REPO_URL: https://github.com/${{ github.repository }}.git
      #     REPO_PATH: /Repos/dtMaster/service
      #     GIT_BRANCH: main
      #   run: |
      #     WORKSPACE_URL=$(terraform output -raw databricks_workspace_url)
      
      #     TOKEN=$(az account get-access-token \
      #             --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d \
      #             --query accessToken -o tsv)

      #     curl -X POST "https://${WORKSPACE_URL}/api/2.0/workspace/mkdirs" \
      #       -H "Authorization: Bearer ${TOKEN}" \
      #       -H "Content-Type: application/json" \
      #       -d '{"path":"/Repos/dtMaster"}'
      
      #     curl -X POST "https://${WORKSPACE_URL}/api/2.0/repos" \
      #       -H "Authorization: Bearer ${TOKEN}" \
      #       -H "Content-Type: application/json" \
      #       -d "{
      #         \"url\": \"${REPO_URL}\",
      #         \"provider\": \"gitHub\",
      #         \"branch\": \"${GIT_BRANCH}\",
      #         \"path\": \"${REPO_PATH}\"
      #       }"

      - name: Upload Terraform state
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: infrastructure/terraform.tfstate
          overwrite: true

  # storage-account:
  #   name: Creating Storage Account
  #   runs-on: ubuntu-latest
  #   needs: databricks
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: |
  #         terraform apply -auto-approve \
  #           -target=azurerm_storage_account.lake \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true

  # storage-containers:
  #   name: Creating Storage Containers
  #   runs-on: ubuntu-latest
  #   needs: storage-account
  #   defaults:
  #     run:
  #       working-directory: ./infrastructure
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Download Terraform state
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: ./infrastructure
      
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
      
  #     - run: terraform init
  #     - run: terraform validate
  #     - run: |
  #         terraform apply -auto-approve \
  #           -target=azurerm_storage_container.raw \
  #           -target=azurerm_storage_container.bronze \
  #           -target=azurerm_storage_container.silver \
  #           -target=azurerm_storage_container.gold \
  #           -var="subscription_id=$(az account show --query id -o tsv)"

  #     - name: Upload Terraform state
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: terraform-state
  #         path: infrastructure/terraform.tfstate
  #         overwrite: true
