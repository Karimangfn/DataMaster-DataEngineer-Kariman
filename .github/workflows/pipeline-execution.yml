run-name: Orchestrate Data Pipeline
name: Orchestrate Data Pipeline

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  detect_services:
    name: üîç Detect Microservices
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: detect
        run: |
          echo "üì¶ Detectando microservi√ßos com Helm charts..."
          services=$(find microservices -type f -path "*/helm/Chart.yaml" -exec dirname {} \; | awk -F'/' '{print $2}' | sort -u)
          
          if [ -z "$services" ]; then
            echo "‚ùå Nenhum microservi√ßo encontrado!"
            echo 'matrix=[]' >> $GITHUB_OUTPUT
            exit 0
          fi

          json_array=$(printf '%s\n' $services | jq -R . | jq -s -c .)
          echo "matrix=$json_array" >> $GITHUB_OUTPUT
          echo "‚úÖ Detectados: $json_array"

  aks-jobs:
    name: üß© Run AKS Jobs
    runs-on: ubuntu-latest
    needs: detect_services
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ‚öôÔ∏è Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_NAME }} \
            --admin

      - name: üöÄ Execute Helm Job for ${{ matrix.service }}
        run: |
          echo "üß© Executando Helm job para ${{ matrix.service }}"

          helm upgrade --install ${{ matrix.service }} microservices/${{ matrix.service }}/helm \
            --reuse-values \
            --set job.enabled=true

          echo "‚è≥ Aguardando job terminar..."
          kubectl wait --for=condition=complete job/${{ matrix.service }}-job --timeout=900s || {
            echo "‚ùå Job ${{ matrix.service }} falhou ou expirou"
            kubectl logs job/${{ matrix.service }}-job || true
            exit 1
          }

          echo "‚úÖ Job ${{ matrix.service }} finalizado com sucesso!"

  databricks-job:
    name: üß† Run Databricks Job
    runs-on: ubuntu-latest
    needs: aks-jobs
    steps:
      - uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üì¶ Install Databricks CLI (AAD support)
        run: pip install databricks-cli --upgrade

      - name: ‚öôÔ∏è Configure Databricks CLI with AAD Auth
        env:
          DATABRICKS_WORKSPACE_URL: ${{ secrets.DATABRICKS_WORKSPACE_URL }}
        run: |
          mkdir -p ~/.databricks
          cat <<EOF > ~/.databricks/config
          [DEFAULT]
          host = $DATABRICKS_WORKSPACE_URL
          auth_type = azure-cli
          EOF

      - name: üöÄ Execute Databricks Job
        env:
          JOB_ID: ${{ secrets.DATABRICKS_JOB_ID }}
        run: |
          echo "‚ñ∂Ô∏è Rodando job Databricks $JOB_ID"
          RUN_ID=$(databricks jobs run-now --job-id "$JOB_ID" --output | jq -r '.run_id')
          databricks runs wait --run-id "$RUN_ID"
          echo "‚úÖ Databricks job finalizado!"

      - name: üßæ Summary
        if: always()
        run: |
          echo "## ‚òÅÔ∏è Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **AKS Jobs executados:** ${{ join(fromJson(needs.detect_services.outputs.matrix), ', ') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Databricks Job:** ${{ secrets.DATABRICKS_JOB_ID }}" >> $GITHUB_STEP_SUMMARY
