run-name: Validate Microservice
name: Validate Microservice

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'microservices/**'

jobs:
  precommit:
    name: Run Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect service path
        id: detect_service_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'microservices/.*/VERSION' | head -n 1 | xargs dirname)
          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ${{ steps.detect_service_path.outputs.path }}/requirements.txt
          pip install pre-commit

      - name: Run Pre-commit
        working-directory: ${{ steps.detect_service_path.outputs.path }}
        run: make precommit

  tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: precommit
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect service path
        id: detect_service_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'microservices/.*/VERSION' | head -n 1 | xargs dirname)
          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ${{ steps.detect_service_path.outputs.path }}/requirements.txt
          pip install pytest pytest-cov

      - name: Run Unit Tests
        working-directory: ${{ steps.detect_service_path.outputs.path }}
        run: make test

  mypy:
    name: Run MyPy
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect service path
        id: detect_service_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'microservices/.*/VERSION' | head -n 1 | xargs dirname)
          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ${{ steps.detect_service_path.outputs.path }}/requirements.txt
          pip install mypy

      - name: Run MyPy
        working-directory: ${{ steps.detect_service_path.outputs.path }}
        run: make mypy

  docker-build:
    name: Validate Docker Image Build
    runs-on: ubuntu-latest
    needs: mypy
    steps:
      - uses: actions/checkout@v4

      - name: Detect service path
        id: detect_service_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'microservices/.*/VERSION' | head -n 1 | xargs dirname)
          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Docker Build Image
        working-directory: ${{ steps.detect_service_path.outputs.path }}
        run: make docker-build

  check_acr_version:
    name: Check Image Version in ACR
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Detect service path
        id: detect_service_path
        run: |
          path=$(git ls-tree -r HEAD --name-only | grep 'microservices/.*/VERSION' | head -n 1 | xargs dirname)
          echo "path=$path" >> "$GITHUB_OUTPUT"

      - name: Check if ACR exists
        run: |
          acr_name=${{ secrets.ACR_NAME }}
          echo "Checking if ACR '$acr_name' exists..."
          if ! az acr show --name "$acr_name" > /dev/null 2>&1; then
            echo "❌ ACR '$acr_name' does not exist or is not accessible."
            exit 1
          else
            echo "✅ ACR '$acr_name' exists and is accessible."
          fi

      - name: Check if image version exists in ACR
        run: |
          service_path=${{ steps.detect_service_path.outputs.path }}
          version=$(cat $service_path/VERSION)
          image_name=$(basename "$service_path")
          acr_name=${{ secrets.ACR_NAME }}
      
          echo "Checking if image exists: $acr_name.azurecr.io/$image_name:$version"
      
          if az acr repository show-tags --name "$acr_name" --repository "$image_name" --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "❌ Image version already exists in ACR."
            exit 1
          else
            echo "✅ Image version does not exist. OK."
          fi
