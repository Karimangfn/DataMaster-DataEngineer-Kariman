run-name: Validate Microservice
name: Validate Microservice

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'microservices/**'

jobs:
  detect_services:
    name: 🔍 Detect Modified Microservices
    runs-on: ubuntu-latest
    outputs:
      services_json: ${{ steps.set-services.outputs.services_json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Fetch develop branch
        run: |
          echo "Fetching develop branch to compare..."
          git fetch origin develop
          echo "Fetch complete."

      - id: set-services
        run: |
          echo "Detecting changed files between origin/develop and HEAD..."
          changed_files=$(git diff --name-only origin/develop...HEAD)
          echo "Changed files:"
          echo "$changed_files"

          services=$(echo "$changed_files" | grep '^microservices/' | cut -d/ -f1,2 | sort -u)

          echo "Detected services:"
          echo "$services"

          if [ -z "$services" ]; then
            echo "No services changed."
            echo "services_json=[]" >> $GITHUB_OUTPUT
          else
            json_array=$(echo "$services" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Services JSON: $json_array"
            echo "services_json=$json_array" >> $GITHUB_OUTPUT
          fi

  precommit:
    name: 🧹 Run Pre-commit
    needs: detect_services
    runs-on: ubuntu-latest
    if: ${{ needs.detect_services.outputs.services_json != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.services_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          echo "Installing dependencies for ${{ matrix.service }}..."
          pip install --upgrade pip
          if ! pip install -r ${{ matrix.service }}/requirements.txt; then
            echo "Failed to install requirements for ${{ matrix.service }}"
            exit 1
          fi
          if ! pip install pre-commit; then
            echo "Failed to install pre-commit"
            exit 1
          fi
          echo "Dependencies installed successfully."

      - name: 🧪 Run Pre-commit
        working-directory: ${{ matrix.service }}
        run: |
          echo "Running pre-commit hooks in ${{ matrix.service }}..."
          if ! make precommit; then
            echo "Pre-commit failed in ${{ matrix.service }}"
            exit 1
          fi
          echo "Pre-commit succeeded."

  tests:
    name: 🧪 Run Unit Tests
    needs: [detect_services, precommit]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_services.outputs.services_json != '' && needs.detect_services.outputs.services_json != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.services_json) }}
    steps:
      - uses: actions/checkout@v4
  
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
  
      - name: 📦 Install dependencies
        run: |
          echo "Installing test dependencies for ${{ matrix.service }}..."
          pip install --upgrade pip
          if ! pip install -r ${{ matrix.service }}/requirements.txt; then
            echo "Failed to install requirements for ${{ matrix.service }}"
            exit 1
          fi
          if ! pip install pytest pytest-cov; then
            echo "Failed to install pytest packages"
            exit 1
          fi
          echo "Test dependencies installed."
  
      - name: 🧪 Run Unit Tests
        working-directory: ${{ matrix.service }}
        run: |
          echo "Running unit tests in ${{ matrix.service }}..."
          if ! make test; then
            echo "Unit tests failed in ${{ matrix.service }}"
            exit 1
          fi
          echo "Unit tests passed."

  mypy:
    name: 🔍 Run MyPy
    needs: [detect_services, tests]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_services.outputs.services_json != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.services_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          echo "Installing MyPy dependencies for ${{ matrix.service }}..."
          pip install --upgrade pip
          if ! pip install -r ${{ matrix.service }}/requirements.txt; then
            echo "Failed to install requirements for ${{ matrix.service }}"
            exit 1
          fi
          if ! pip install mypy; then
            echo "Failed to install mypy"
            exit 1
          fi
          echo "MyPy dependencies installed."

      - name: 🔍 Run MyPy
        working-directory: ${{ matrix.service }}
        run: |
          echo "Running MyPy type checking in ${{ matrix.service }}..."
          if ! make mypy; then
            echo "MyPy failed in ${{ matrix.service }}"
            exit 1
          fi
          echo "MyPy succeeded."

  docker-build:
    name: 🐳 Validate Docker Image Build
    needs: [detect_services, mypy]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_services.outputs.services_json != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.services_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐳 Docker Build Image
        working-directory: ${{ matrix.service }}
        run: |
          echo "Building Docker image for ${{ matrix.service }}..."
          if ! make docker-build; then
            echo "Docker build failed for ${{ matrix.service }}"
            exit 1
          fi
          echo "Docker build succeeded."

  check_acr_version:
    name: 🔎 Check Image Version in ACR
    needs: [detect_services, docker-build]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_services.outputs.services_json != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect_services.outputs.services_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔍 Check if ACR exists
        run: |
          acr_name=${{ secrets.ACR_NAME }}
          echo "Checking if ACR '$acr_name' exists..."
          if ! az acr show --name "$acr_name" > /dev/null 2>&1; then
            echo "ACR '$acr_name' does not exist or is not accessible."
            exit 1
          fi
          echo "ACR exists."

      - name: 🔍 Check if image version exists in ACR
        run: |
          service_path=${{ matrix.service }}
          version=$(cat "$service_path/VERSION")
          image_name=$(basename "$service_path")
          acr_name=${{ secrets.ACR_NAME }}
          echo "Checking if image $image_name with version $version exists in ACR $acr_name..."
          if az acr repository show-tags --name "$acr_name" --repository "$image_name" --query "[?contains(@, '$version')]" | grep -q "$version"; then
            echo "Image version $version already exists in ACR repository $image_name."
            exit 1
          fi
          echo "Image version $version not found in ACR repository $image_name."

  summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - detect_services
      - precommit
      - tests
      - mypy
      - docker-build
      - check_acr_version
    steps:
      - name: 📄 Generate Summary
        run: |
          echo "### 📋 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          services_json='${{ needs.detect_services.outputs.services_json }}'
          if [ "$services_json" != "[]" ]; then
            echo "#### 🔧 Changed Services" >> $GITHUB_STEP_SUMMARY
            echo "$services_json" | jq -r '.[]' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "#### 🔧 Changed Services" >> $GITHUB_STEP_SUMMARY
            echo "- None" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          format_status() {
            case "$1" in
              success) echo "✅ success" ;;
              failure) echo "❌ failure" ;;
              skipped) echo "⏭️ skipped" ;;
              *) echo "❔ $1" ;;
            esac
          }

          echo "#### 🧪 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Precommit: $(format_status "${{ needs.precommit.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: $(format_status "${{ needs.tests.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- MyPy: $(format_status "${{ needs.mypy.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: $(format_status "${{ needs.docker-build.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- ACR Check: $(format_status "${{ needs.check_acr_version.result }}")" >> $GITHUB_STEP_SUMMARY
