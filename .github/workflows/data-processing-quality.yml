run-name: Data Processing Quality
name: Data Processing Quality

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'data-processing/**'

jobs:
  detect_layers:
    name: 🔍 Detect Modified Layers
    runs-on: ubuntu-latest
    outputs:
      layers_json: ${{ steps.set-layers.outputs.layers_json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Fetch develop branch
        run: |
          git fetch origin develop

      - id: set-layers
        run: |
          changed_files=$(git diff --name-only origin/develop...HEAD)
          echo "Changed files:"
          echo "$changed_files"

          layers=$(echo "$changed_files" | grep '^data-processing/' | cut -d/ -f1,2 | sort -u)
          echo "Detected layers:"
          echo "$layers"

          if [ -z "$layers" ]; then
            echo "layers_json=[]" >> $GITHUB_OUTPUT
          else
            json_array=$(echo "$layers" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "layers_json=$json_array" >> $GITHUB_OUTPUT
          fi

  precommit:
    name: 🧹 Run Pre-commit
    needs: detect_layers
    runs-on: ubuntu-latest
    if: ${{ needs.detect_layers.outputs.layers_json != '[]' }}
    strategy:
      matrix:
        layer: ${{ fromJson(needs.detect_layers.outputs.layers_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pre-commit
          if [ -f "${{ matrix.layer }}/requirements.txt" ]; then
            pip install -r "${{ matrix.layer }}/requirements.txt"
          fi

      - name: 🧪 Run Pre-commit
        working-directory: ${{ matrix.layer }}
        run: make precommit

  tests:
    name: 🧪 Run Unit Tests
    needs: [detect_layers, precommit]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_layers.outputs.layers_json != '[]' }}
    strategy:
      matrix:
        layer: ${{ fromJson(needs.detect_layers.outputs.layers_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f "${{ matrix.layer }}/requirements.txt" ]; then
            pip install -r "${{ matrix.layer }}/requirements.txt"
          fi

      - name: 🧪 Run Unit Tests
        working-directory: ${{ matrix.layer }}
        run: make test

  mypy:
    name: 🔍 Run MyPy
    needs: [detect_layers, tests]
    runs-on: ubuntu-latest
    if: ${{ needs.detect_layers.outputs.layers_json != '[]' }}
    strategy:
      matrix:
        layer: ${{ fromJson(needs.detect_layers.outputs.layers_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install mypy
          if [ -f "${{ matrix.layer }}/requirements.txt" ]; then
            pip install -r "${{ matrix.layer }}/requirements.txt"
          fi

      - name: 🔍 Run MyPy
        working-directory: ${{ matrix.layer }}
        run: make mypy

  summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [detect_layers, precommit, tests, mypy]
    steps:
      - name: 📄 Generate Summary
        run: |
          echo "### 📋 Data Processing Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          layers_json='${{ needs.detect_layers.outputs.layers_json }}'
          if [ "$layers_json" != "[]" ]; then
            echo "#### 🔧 Changed Layers" >> $GITHUB_STEP_SUMMARY
            echo "$layers_json" | jq -r '.[]' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "#### 🔧 Changed Layers" >> $GITHUB_STEP_SUMMARY
            echo "- None" >> $GITHUB_STEP_SUMMARY
            echo ""
          fi

          format_status() {
            case "$1" in
              success) echo "✅ success" ;;
              failure) echo "❌ failure" ;;
              skipped) echo "⏭️ skipped" ;;
              *) echo "❔ $1" ;;
            esac
          }

          echo "#### 🧪 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Precommit: $(format_status "${{ needs.precommit.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: $(format_status "${{ needs.tests.result }}")" >> $GITHUB_STEP_SUMMARY
          echo "- MyPy: $(format_status "${{ needs.mypy.result }}")" >> $GITHUB_STEP_SUMMARY
